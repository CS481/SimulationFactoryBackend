<?php namespace SimulationFactoryBackend;
require __DIR__ . '/../vendor/autoload.php';
use MongoDB\Client;
use Exception;

class MongoConn {
  protected $conn;
  private static $username;
  private static $password;
  private static $host;

  // TODO: default $database to 'SimulationFactory'
  public function __construct($user, $password, $database='test') {
    if (!isset($username)) {
      MongoConn::SetCredentials();
    }
    $this->conn = new Client("mongodb://${username}:${password}@${MongoConn::host}");
  }

  public static function createUser() {
  $this->conn = new Client("mongodb://${MongoConn::username}:$password}@${MongoConn::host}");
  }

  public function beginTransaction() {}
  public function submitTransaction() {}
  public function abortTransaction() {}

  public function insert(string $collection, object $data) {
    $coll = $this->conn->test->$collection;
    $insertOneResult = $coll->insertOne($data);
    if ($insertOneResult->getInsertedCount() != 1) {
      throw new Exception('Failed to insert data into the database');
    }
  }

  public function select(string $collection, object $query, array $keys=[]) {
    $coll = $this->conn->test->$collection;
    $projection_keys = [];
    foreach($keys as $key) {
      $projection_keys[$key] = 1;
    }
    $projection = ['projection' => $projection_keys];
    return $coll->find($query, $projection);
  }

  public function update(string $collection, object $data, object $query) {
    $coll = $this->conn->test->$collection;
    $updateOneResult = $coll->updateOne($query, ['$set' => $data]);
    if ($updateOneResult->getMatchedCount() != 1) {
      throw new Exception('Failed to update data in the database');
    }
  }

  private function SetCredentials() {
    $ini_path = getenv('MONGODB_CREDENTIALS');
    $credentials = parse_ini_file($ini_path);
    if (!$credentials) {
      throw new Exception('Cannot read mongodb credentials file');
    } else {
      MongoConn::$username = $credentials['username'];
      MongoConn::$password = $credentials['password'];
      MongoConn::$host = $credentials['host'];
   }
  }
}
?>
